# -*- encoding: utf-8 -*-
from flask import (
    render_template, redirect, request, url_for, session, jsonify
)
from flask_login import current_user, login_user, logout_user
from apps import db, login_manager
from apps.authentication import blueprint
from apps.authentication.forms import LoginForm, CreateAccountForm
from apps.authentication.models import Users
from apps.authentication.util import verify_pass

from pymongo import MongoClient
from bson.objectid import ObjectId
from datetime import datetime, timedelta
import os
import socket
from dotenv import load_dotenv

# Load environment and setup MongoDB
load_dotenv()
client = MongoClient(os.getenv("MONGO_URI"))
db_mongo = client['virtual_Presenz']

# Collections
login_logs_collection = db_mongo['login_logs']
camera_collection = db_mongo['cameras']
smtp_collection = db_mongo['smtp_settings']

# -------------- SMTP Settings API Routes --------------
import smtplib
from email.message import EmailMessage

# Add this helper function anywhere in your file (top or bottom is fine)

def send_email_alert_direct(message):
    try:
        smtp_config = smtp_collection.find_one()
        if not smtp_config:
            print("SMTP settings not found")
            return False

        sender_name = smtp_config.get('sender_name', 'Alert System')
        sender_email = smtp_config.get('sender_email')
        recipient_email = smtp_config.get('recipient_email', sender_email)

        if not sender_email or not recipient_email:
            print("Sender or recipient email not configured")
            return False

        subject = smtp_config.get('smtp_greeting', 'System Alert')
        timestamp = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

        # Company logo URL
        logo_url = (
            "https://media.licdn.com/dms/image/v2/D4E0BAQFO8-JNKbFXCQ/company-logo_200_200/"
            "company-logo_200_200/0/1719637796726?e=1755129600&v=beta&t=X9gWoDmwIhZ8LUoA018qMXy-m3zuNV3KGDN1rPfdlVc"
        )

        # Build polished HTML content
        html_content = f"""
        <html>
            <body style="font-family: Arial, sans-serif; background-color: #f4f4f4; padding: 20px;">
                <div style="max-width: 600px; margin: auto; background: white; padding: 20px; border-radius: 10px;">
                    <div style="width: 100%; text-align: center; margin-bottom: 20px;">
                        <table role="presentation" style="margin: 0 auto;">
                            <tr>
                                <td style="vertical-align: middle;">
                                    <img src="{logo_url}" alt="Logo" width="50" height="50" style="border-radius: 50%; display: block;">
                                </td>
                                <td style="vertical-align: middle; padding-left: 10px;">
                                    <span style="font-size: 22px; font-weight: bold; color: #2c3e50;">
                                        Virtual Presenz
                                    </span>
                                </td>
                            </tr>
                        </table>
                    </div>

                    <hr style="border: none; border-top: 1px solid #ccc;">

                    <!-- Polished Alert Box -->
                    <div style="background: linear-gradient(135deg, #e0f3ff, #f0f8ff);
                                box-shadow: 0 2px 5px rgba(0,0,0,0.05);
                                padding: 16px 20px;
                                border-radius: 10px;
                                margin: 25px 0;
                                font-size: 15px;">
                        <div style="display: flex; align-items: center;">
                            <div style="color: #1f2937;">
                                <strong style="color: #0f172a;">Camera Action :</strong><br>
                                <p style="font-size: 14px; color: #999;">{message}</p>
                                <p style="font-size: 14px; color: #999;">‚è±Ô∏èTime: {timestamp}</p>
                            </div>
                        </div>
                    </div>

                    
                    <hr style="border: none; border-top: 1px solid #ccc;">

                    <p style="font-size: 13px; color: #777; text-align:center;">
                        This alert was generated by <strong>{sender_name}</strong>.
                    </p>

                    <!-- Footer -->
                    <div style="margin-top: 30px; text-align: center; font-size: 12px; color: #aaa;">
                        <p>&copy; 2025 Virtual Presenz Inc. All rights reserved.</p>
                        <p>
                            For support, contact us at
                            <a href="mailto:support@virtualpresenz.com" style="color: navy;">
                                support@virtualpresenz.com
                            </a>
                        </p>
                    </div>
                </div>
            </body>
        </html>
        """

        # Construct email
        email = EmailMessage()
        email['Subject'] = subject
        email['From'] = f"{sender_name} <{sender_email}>"
        email['To'] = f"<{recipient_email}>"
        email.set_content(message)  # Plain-text fallback
        email.add_alternative(html_content, subtype='html')  # HTML content

        # Send email
        with smtplib.SMTP(smtp_config['smtp_server'], int(smtp_config['smtp_port'])) as smtp:
            smtp.starttls()
            smtp.login(sender_email, smtp_config['smtp_password'])
            smtp.send_message(email)

        print("Fancy alert email with logo sent.")
        return True

    except Exception as e:
        print("SMTP Alert Error:", e)
        return False


@blueprint.route('/test-smtp')
def test_smtp():
    smtp_config = smtp_collection.find_one()
    try:
        email = EmailMessage()
        email['Subject'] = 'SMTP Test'
        email['From'] = smtp_config['sender_email']
        email['To'] = smtp_config['sender_email']
        email.set_content('This is a test email sent from Flask app.')

        with smtplib.SMTP(smtp_config['smtp_server'], int(smtp_config['smtp_port'])) as smtp:
            smtp.starttls()
            smtp.login(smtp_config['sender_email'], smtp_config['smtp_password'])
            smtp.send_message(email)

        return 'Test Email Sent!'
    except Exception as e:
        return f'SMTP ERROR: {e}'


@blueprint.route('/get-smtp-settings', methods=['GET'])
def get_smtp_settings_route():
    try:
        settings = smtp_collection.find_one({}, {'_id': 0}) or {}
        return jsonify(settings)
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error fetching SMTP settings: {str(e)}'}), 500


@blueprint.route('/save-smtp-settings', methods=['POST'])
def save_smtp_settings_route():
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': 'Invalid input'}), 400

        smtp_collection.update_one({}, {'$set': data}, upsert=True)

        # Optional: Add to user log
        log_id = session.get('log_id')
        if log_id:
            login_logs_collection.update_one(
                {"_id": ObjectId(log_id)},
                {"$push": {"user_action": "Updated SMTP settings"}}
            )

        return jsonify({'success': True, 'message': 'SMTP settings saved successfully'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error saving SMTP settings: {str(e)}'}), 500

# -------------- Camera Setup API Routes --------------

@blueprint.route('/add-camera', methods=['POST'])
def add_camera():
    try:
        data = request.get_json()
        camera_data = {
            'name': data.get('name'),
            'serial_number': data.get('serial_number'),
            'model': data.get('model'),
            'model_specific': data.get('model_specific'),
            'ip_address': data.get('ip_address'),
            'mac_address': data.get('mac_address'),
            'rtsp_link': data.get('rtsp_link')
        }
        result = camera_collection.insert_one(camera_data)

        # Log user action
        log_id = session.get('log_id')
        if log_id:
            login_logs_collection.update_one(
                {"_id": ObjectId(log_id)},
                {"$push": {"user_action": f"Added {camera_data['name']}"}}
            )

        # Send email alert
        send_email_alert_direct(f"üì∑ Camera added: {camera_data['name']}")

        return jsonify({'success': True, 'message': 'Camera added successfully'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error adding camera: {str(e)}'}), 500

@blueprint.route('/get-cameras', methods=['GET'])
def get_cameras():
    try:
        cameras = list(camera_collection.find())
        for camera in cameras:
            camera['_id'] = str(camera['_id'])  # Convert ObjectId to string for JSON
        return jsonify({'success': True, 'cameras': cameras})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error fetching cameras: {str(e)}'}), 500


@blueprint.route('/update-camera/<camera_id>', methods=['PUT'])
def update_camera(camera_id):
    try:
        data = request.get_json()
        update_fields = {
            'name': data.get('name'),
            'serial_number': data.get('serial_number'),
            'model': data.get('model'),
            'model_specific': data.get('model_specific'),
            'ip_address': data.get('ip_address'),
            'mac_address': data.get('mac_address'),
            'rtsp_link': data.get('rtsp_link')
        }
        camera_collection.update_one(
            {"_id": ObjectId(camera_id)},
            {"$set": update_fields}
        )

        # Log user action
        log_id = session.get('log_id')
        if log_id:
            login_logs_collection.update_one(
                {"_id": ObjectId(log_id)},
                {"$push": {"user_action": f"Updated {update_fields['name']}"}}
            )

        # Send email alert
        send_email_alert_direct(f"Camera updated: {update_fields['name']}")

        return jsonify({'success': True, 'message': 'Camera updated successfully'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error updating camera: {str(e)}'}), 500


@blueprint.route('/delete-camera/<camera_id>', methods=['DELETE'])
def delete_camera(camera_id):
    try:
        camera = camera_collection.find_one({'_id': ObjectId(camera_id)})
        result = camera_collection.delete_one({'_id': ObjectId(camera_id)})

        if result.deleted_count == 1:
            # Log user action
            log_id = session.get('log_id')
            camera_name = camera.get('name', 'Unknown')
            if log_id and camera:
                login_logs_collection.update_one(
                    {"_id": ObjectId(log_id)},
                    {"$push": {"user_action": f"Deleted {camera_name}"}}
                )

            # Send email alert
            send_email_alert_direct(f"üóëÔ∏è Camera deleted: {camera_name}")

            return jsonify({'success': True, 'message': 'Camera deleted'})
        else:
            return jsonify({'success': False, 'message': 'Camera not found'}), 404
    except Exception as e:
        return jsonify({'success': False, 'message': f'Error deleting camera: {str(e)}'}), 500

@blueprint.route('/cameras', methods=['GET'])
def cameras():
    try:
        cameras = list(camera_collection.find())
        print(f"Found {len(cameras)} cameras.")
    except Exception as e:
        print("Error fetching cameras:", e)
        cameras = []

    # Use the actual path to your template file!
    return render_template('home/cameras.html', cameras=cameras)




# -------------- Session Timeout Handling --------------

@blueprint.before_app_request
def track_user_activity():
    if current_user.is_authenticated:
        now = datetime.utcnow()
        last_active = session.get('last_active')

        # 30 minutes timeout threshold
        timeout_minutes = 30
        if last_active:
            last_active_dt = datetime.fromisoformat(last_active)
            if (now - last_active_dt) > timedelta(minutes=timeout_minutes):
                # Timeout detected
                log_id = session.pop('log_id', None)
                login_time = session.pop('login_time', None)
                session.clear()

                if log_id and login_time:
                    login_time_dt = datetime.fromisoformat(login_time)
                    session_duration = now - login_time_dt
                    minutes, seconds = divmod(int(session_duration.total_seconds()), 60)
                    duration_str = f"Timed out: {minutes}m {seconds}s"

                    login_logs_collection.update_one(
                        {"_id": ObjectId(log_id)},
                        {"$set": {
                            "logout_time": now,
                            "performance": duration_str
                        }}
                    )
                logout_user()
                return redirect(url_for('authentication_blueprint.login'))

        session['last_active'] = now.isoformat()


# -------------- Default and Authentication Routes --------------

@blueprint.route('/')
def route_default():
    if current_user.is_authenticated:
        return redirect(url_for('home_blueprint.index'))
    return redirect(url_for('authentication_blueprint.login'))


@blueprint.route('/login', methods=['GET', 'POST'])
def login():
    login_form = LoginForm(request.form)

    if 'login' in request.form:
        username = request.form['username']
        password = request.form['password']

        user = Users.query.filter_by(username=username).first()

        ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if ip and ',' in ip:
            ip = ip.split(',')[0].strip()
        machine_name = socket.gethostname()

        login_time = datetime.utcnow()

        log_data = {
            "username": username,
            "login_time": login_time,
            "ip_address": ip,
            "machine_name": machine_name,
            "user_action": [],  # Initialize once here
            "logout_time": None,
            "performance": "Normal"
        }

        if user and verify_pass(password, user.password):
            login_user(user)

            log_data["message"] = "Login Successful"
            log_data["performance"] = "Active"

            inserted_log = login_logs_collection.insert_one(log_data)
            session['log_id'] = str(inserted_log.inserted_id)
            session['login_time'] = login_time.isoformat()
            session['last_active'] = login_time.isoformat()

            # REMOVE this block - it duplicates "Viewing"
            # login_logs_collection.update_one(
            #     {"_id": inserted_log.inserted_id},
            #     {"$push": {"user_action": "Viewing"}}
            # )

            return redirect(url_for('home_blueprint.index'))
        else:
            log_data["message"] = "Login Failed"
            log_data["performance"] = "Failed"
            login_logs_collection.insert_one(log_data)

            return render_template('accounts/login.html',
                                   msg='Wrong user or password',
                                   form=login_form)

    if not current_user.is_authenticated:
        return render_template('accounts/login.html', form=login_form)

    return redirect(url_for('home_blueprint.index'))


@blueprint.route('/logout')
def logout():
    log_id = session.pop('log_id', None)
    login_time = session.pop('login_time', None)

    if log_id and login_time:
        try:
            logout_time = datetime.utcnow()
            login_time_dt = datetime.fromisoformat(login_time)
            session_duration = logout_time - login_time_dt
            minutes, seconds = divmod(int(session_duration.total_seconds()), 60)
            duration_str = f"Session ended: {minutes}m {seconds}s"

            login_logs_collection.update_one(
                {"_id": ObjectId(log_id)},
                {"$set": {
                    "logout_time": logout_time,
                    "performance": duration_str
                }}
            )
        except Exception as e:
            print("Logout Logging Error:", e)

    logout_user()
    session.clear()
    return redirect(url_for('authentication_blueprint.login'))


@blueprint.route('/register', methods=['GET', 'POST'])
def register():
    create_account_form = CreateAccountForm(request.form)

    if 'register' in request.form:
        username = request.form['username']
        email = request.form['email']

        if Users.query.filter_by(username=username).first():
            return render_template('accounts/register.html',
                                   msg='Username already registered',
                                   success=False,
                                   form=create_account_form)

        if Users.query.filter_by(email=email).first():
            return render_template('accounts/register.html',
                                   msg='Email already registered',
                                   success=False,
                                   form=create_account_form)

        user = Users(**request.form)
        db.session.add(user)
        db.session.commit()

        logout_user()

        return render_template('accounts/register.html',
                               msg='Account created successfully.',
                               success=True,
                               form=create_account_form)

    return render_template('accounts/register.html', form=create_account_form)


# -------------- Logs Display Route --------------

@blueprint.route('/logs')
def logs():
    logs = []
    for log in login_logs_collection.find():
        logs.append({
            "_id": str(log.get("_id")),
            "login_time": log.get("login_time"),
            "logout_time": log.get("logout_time"),
            "sequence": log.get("sequence", ""),
            "message": log.get("message", ""),
            "user_action": ", ".join(log["user_action"]) if log.get("user_action") else "No action taken",
            "machine_name": log.get("machine_name", ""),
            "ip_address": log.get("ip_address", ""),
            "user": log.get("username", ""),
            "performance": log.get("performance", "")
        })

    return render_template('admin/logs.html', logs=logs)


# -------------- Unauthorized and Error Handlers --------------

@login_manager.unauthorized_handler
def unauthorized_handler():
    return render_template('home/page-403.html'), 403


@blueprint.errorhandler(403)
def access_forbidden(error):
    return render_template('home/page-403.html'), 403


@blueprint.errorhandler(404)
def not_found_error(error):
    return render_template('home/page-404.html'), 404


@blueprint.errorhandler(500)
def internal_error(error):
    return render_template('home/page-500.html'), 500
